"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const localForage = require("localforage");
const middleware_storage_1 = require("./middleware-storage");
const options_1 = require("./options");
const storage_sync_1 = require("./storage-sync");
const sessionStorageDriver = require("localforage-driver-session-storage");
exports.getAllDataFromLocalForage = (options) => {
    options_1.config.keys = options.keys;
    options_1.config.storage = middleware_storage_1.middlewareStorage;
    const driver = options.driver;
    if (driver === 'SESSIONSTORAGE') {
        localForage.defineDriver(sessionStorageDriver);
        localForage.setDriver(sessionStorageDriver._driver);
    }
    localForage.config({
        driver: driver || localForage.LOCALSTORAGE,
        name: 'NGRX Storage',
        version: 1.0,
        size: 4980736,
        storeName: 'keyvaluepairs',
        description: 'NGRX storage persist'
    });
    return localForage.keys()
        .then(keys => {
        return Promise.all(keys.map((key) => localForage.getItem(key).then(data => [key, data])));
    })
        .then(dataWithKeys => {
        const dataStorage = dataWithKeys.reduce((previousValue, [key, data]) => {
            previousValue[key] = data;
            return previousValue;
        }, {});
        middleware_storage_1.middlewareStorage.dataStorage = dataStorage;
        return dataStorage;
    });
};
function storageSyncMetaReducer(reducer) {
    return storage_sync_1.storageSync(reducer);
}
exports.storageSyncMetaReducer = storageSyncMetaReducer;
exports.default = localForage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0MsNkRBQXVEO0FBQ3ZELHVDQUFnRDtBQUNoRCxpREFBMkM7QUFDM0MsMkVBQTJFO0FBRTlELFFBQUEseUJBQXlCLEdBQUcsQ0FBQyxPQUFzQixFQUFFLEVBQUU7SUFDbEUsZ0JBQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMzQixnQkFBTSxDQUFDLE9BQU8sR0FBRyxzQ0FBaUIsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzlCLElBQUcsTUFBTSxLQUFLLGdCQUFnQixFQUFFO1FBQzlCLFdBQVcsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMvQyxXQUFXLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNqQixNQUFNLEVBQVEsTUFBTSxJQUFJLFdBQVcsQ0FBQyxZQUFZO1FBQ2hELElBQUksRUFBVSxjQUFjO1FBQzVCLE9BQU8sRUFBTyxHQUFHO1FBQ2pCLElBQUksRUFBVSxPQUFPO1FBQ3JCLFNBQVMsRUFBSyxlQUFlO1FBQzdCLFdBQVcsRUFBRyxzQkFBc0I7S0FDckMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFO1NBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNYLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDaEIsSUFBSSxDQUFDLEdBQUcsQ0FDTixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUM1RCxDQUNGLENBQUM7SUFDSixDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWtCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUMxRSxhQUFhLENBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNQLHNDQUFpQixDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDNUMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRixTQUFnQixzQkFBc0IsQ0FDbEMsT0FBWTtJQUVkLE9BQU8sMEJBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBSkQsd0RBSUM7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsb2NhbEZvcmFnZSBmcm9tICdsb2NhbGZvcmFnZSc7XHJcbmltcG9ydCB7bWlkZGxld2FyZVN0b3JhZ2V9IGZyb20gXCIuL21pZGRsZXdhcmUtc3RvcmFnZVwiO1xyXG5pbXBvcnQge2NvbmZpZywgU3RvcmFnZUNvbmZpZ30gZnJvbSBcIi4vb3B0aW9uc1wiO1xyXG5pbXBvcnQge3N0b3JhZ2VTeW5jfSBmcm9tIFwiLi9zdG9yYWdlLXN5bmNcIjtcclxuaW1wb3J0ICogYXMgc2Vzc2lvblN0b3JhZ2VEcml2ZXIgZnJvbSAnbG9jYWxmb3JhZ2UtZHJpdmVyLXNlc3Npb24tc3RvcmFnZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QWxsRGF0YUZyb21Mb2NhbEZvcmFnZSA9IChvcHRpb25zOiBTdG9yYWdlQ29uZmlnKSA9PiB7XHJcbiAgY29uZmlnLmtleXMgPSBvcHRpb25zLmtleXM7XHJcbiAgY29uZmlnLnN0b3JhZ2UgPSBtaWRkbGV3YXJlU3RvcmFnZTtcclxuICBjb25zdCBkcml2ZXIgPSBvcHRpb25zLmRyaXZlcjtcclxuICBpZihkcml2ZXIgPT09ICdTRVNTSU9OU1RPUkFHRScpIHtcclxuICAgIGxvY2FsRm9yYWdlLmRlZmluZURyaXZlcihzZXNzaW9uU3RvcmFnZURyaXZlcik7XHJcbiAgICBsb2NhbEZvcmFnZS5zZXREcml2ZXIoc2Vzc2lvblN0b3JhZ2VEcml2ZXIuX2RyaXZlcik7XHJcbiAgfVxyXG4gIGxvY2FsRm9yYWdlLmNvbmZpZyh7XHJcbiAgICBkcml2ZXIgICAgICA6IGRyaXZlciB8fCBsb2NhbEZvcmFnZS5MT0NBTFNUT1JBR0UsXHJcbiAgICBuYW1lICAgICAgICA6ICdOR1JYIFN0b3JhZ2UnLFxyXG4gICAgdmVyc2lvbiAgICAgOiAxLjAsXHJcbiAgICBzaXplICAgICAgICA6IDQ5ODA3MzYsXHJcbiAgICBzdG9yZU5hbWUgICA6ICdrZXl2YWx1ZXBhaXJzJyxcclxuICAgIGRlc2NyaXB0aW9uIDogJ05HUlggc3RvcmFnZSBwZXJzaXN0J1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gbG9jYWxGb3JhZ2Uua2V5cygpXHJcbiAgICAudGhlbihrZXlzID0+IHtcclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxyXG4gICAgICAgIGtleXMubWFwKFxyXG4gICAgICAgICAgKGtleSkgPT4gbG9jYWxGb3JhZ2UuZ2V0SXRlbShrZXkpLnRoZW4oZGF0YSA9PiBba2V5LCBkYXRhXSlcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZGF0YVdpdGhLZXlzID0+IHtcclxuICAgICAgY29uc3QgZGF0YVN0b3JhZ2UgPSBkYXRhV2l0aEtleXMucmVkdWNlKChwcmV2aW91c1ZhbHVlOiBhbnksIFtrZXksIGRhdGFdKSA9PiB7XHJcbiAgICAgICAgcHJldmlvdXNWYWx1ZVs8c3RyaW5nPmtleV0gPSBkYXRhO1xyXG4gICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xyXG4gICAgICB9LCB7fSk7XHJcbiAgICAgIG1pZGRsZXdhcmVTdG9yYWdlLmRhdGFTdG9yYWdlID0gZGF0YVN0b3JhZ2U7XHJcbiAgICAgIHJldHVybiBkYXRhU3RvcmFnZTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VTeW5jTWV0YVJlZHVjZXIoXHJcbiAgICByZWR1Y2VyOiBhbnlcclxuKTogYW55IHtcclxuICByZXR1cm4gc3RvcmFnZVN5bmMocmVkdWNlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxvY2FsRm9yYWdlO1xyXG4iXX0=